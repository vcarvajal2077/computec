/**
 * Carrusel de Rese√±as de Clientes
 * Conecta con la base de datos a trav√©s de la API
 */

class Rese√±asCarrusel {
    constructor() {
        this.rese√±as = [];
        this.currentIndex = 0;
        this.itemsPerView = 3;
        this.autoplayInterval = null;
        this.autoplayDelay = 5000;
        
        this.init();
    }
    
    async init() {
        console.log('üöÄ Inicializando carrusel de rese√±as...');
        await this.loadRese√±as();
        this.renderCarrusel();
        this.bindEvents();
        this.startAutoplay();
        console.log('‚úÖ Carrusel de rese√±as inicializado');
    }
    
    async loadRese√±as() {
        try {
            console.log('üì° Cargando rese√±as desde la API...');
            const response = await fetch('api/rese√±as-carrusel.php?action=rese√±as');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üì° Respuesta de la API:', data);
            
            if (data.success && data.data) {
                this.rese√±as = data.data;
                console.log('‚úÖ Rese√±as cargadas:', this.rese√±as.length);
            } else {
                throw new Error('No se pudieron cargar las rese√±as desde la API');
            }
        } catch (error) {
            console.error('‚ùå Error al cargar rese√±as:', error);
            // Usar rese√±as de ejemplo en caso de error
            this.rese√±as = [
                {
                    id: 1,
                    nombre: "Cliente Ejemplo",
                    empresa: "Empresa Demo",
                    comentario: "Excelente servicio t√©cnico",
                    calificaci√≥n: 5,
                    servicio: "Mantenimiento",
                    fecha: "01/01/2025"
                }
            ];
        }
    }
    
    renderCarrusel() {
        const container = document.getElementById('rese√±as-carrusel');
        if (!container) {
            console.error('‚ùå No se encontr√≥ el contenedor #rese√±as-carrusel');
            return;
        }
        
        console.log('üé® Renderizando carrusel con', this.rese√±as.length, 'rese√±as');
        
        const carruselHTML = `
            <div class="carrusel-container">
                <div class="carrusel-wrapper">
                    ${this.rese√±as.map(rese√±a => this.createRese√±aCard(rese√±a)).join('')}
                </div>
            </div>
        `;
        
        container.innerHTML = carruselHTML;
        this.wrapper = container.querySelector('.carrusel-wrapper');
        
        console.log('‚úÖ Carrusel renderizado');
    }
    
    createRese√±aCard(rese√±a) {
        const estrellas = this.generateStars(rese√±a.calificaci√≥n);
        
        return `
            <div class="rese√±a-card" data-id="${rese√±a.id}">
                <div class="rese√±a-header">
                    <div class="rese√±a-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="rese√±a-info">
                        <h4 class="rese√±a-nombre">${rese√±a.nombre}</h4>
                        <p class="rese√±a-empresa">${rese√±a.empresa}</p>
                        <div class="rese√±a-calificaci√≥n">
                            ${estrellas}
                        </div>
                    </div>
                </div>
                
                <div class="rese√±a-contenido">
                    <p class="rese√±a-comentario">"${rese√±a.comentario}"</p>
                </div>
                
                <div class="rese√±a-footer">
                    <span class="rese√±a-servicio">${rese√±a.servicio}</span>
                    <span class="rese√±a-fecha">${rese√±a.fecha}</span>
                </div>
            </div>
        `;
    }
    
    generateStars(calificaci√≥n) {
        let stars = '';
        for (let i = 1; i <= 5; i++) {
            if (i <= calificaci√≥n) {
                stars += '<i class="fas fa-star filled"></i>';
            } else {
                stars += '<i class="fas fa-star"></i>';
            }
        }
        return stars;
    }
    
    
    // M√©todos de navegaci√≥n eliminados - ahora se usa scroll nativo
    
    startAutoplay() {
        // Autoplay deshabilitado para navegaci√≥n por scroll
    }
    
    stopAutoplay() {
        if (this.autoplayInterval) {
            clearInterval(this.autoplayInterval);
            this.autoplayInterval = null;
        }
    }
    
    bindEvents() {
        // Eventos de scroll nativo - no se necesitan eventos adicionales
        console.log('üì± Navegaci√≥n por scroll habilitada');
    }
    
    adjustItemsPerView() {
        // Ajuste responsivo para scroll - no se necesita actualizar carrusel
        if (window.innerWidth <= 768) {
            this.itemsPerView = 1;
        } else if (window.innerWidth <= 1024) {
            this.itemsPerView = 2;
        } else {
            this.itemsPerView = 3;
        }
    }
}

// Inicializar cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', () => {
    new Rese√±asCarrusel();
});
